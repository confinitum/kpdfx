apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

java {
    withSourcesJar()
}

//simulate withJavadocJar
tasks.register('javadocJar', org.gradle.jvm.tasks.Jar) {
    dependsOn(dokkaJavadoc)
    archiveClassifier.set('javadoc')
    from(dokkaJavadoc.outputDirectory)
    with(jar)
}
tasks.named('sourcesJar') { finalizedBy(javadocJar) }

//nexus
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = findProperty("SONATYPEUSERNAME")
            password = findProperty("SONATYPEPASSWORD")
        }
    }
    // these are not strictly required. The default timeouts are set to 1 minute.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("SONATYPEUSERNAME")
                password = findProperty("SONATYPEPASSWORD")
            }
        }
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/confinitum/kpdfx")
//            credentials {
//                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
//                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
//            }
//        }
    }

    publications {
        bundle(MavenPublication) {
            from(components.java)
            artifact javadocJar
            pom {
                name = "${project.group}:${project.name}"
                description = 'JavaFx PdfView Control'
                url = 'https://github.com/confinitum/kpdfx'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jaw'
                        name = 'Jacek Wicka'
                        email = 'jacek.wicka@confinitum.de'
                        organization = 'confinitum'
                        organizationUrl = 'https://github.com/confinitum'
                    }
                }
                scm {
                    connection = 'https://github.com/confinitum/kpdfx.git'
                    developerConnection = 'https://github.com/confinitum/kpdfx.git'
                    url = 'https://github.com/confinitum/kpdfx'
                }
            }
        }
    }
}

signing {
    def ringfile = project.findProperty("signing.secretKeyRingFile")
    if (ringfile == null) {
        def signingKey = findProperty("SIGNINGKEY")
        def signingPassword = findProperty("SIGNINGPASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.bundle
}

